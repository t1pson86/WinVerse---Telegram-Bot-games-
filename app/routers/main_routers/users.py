from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from database import UsersRepository
from schemas import UsersBase
from middleware import GroupOnlyMiddleware


router = Router()
router.message.middleware(GroupOnlyMiddleware())


@router.message(Command('reg'))
async def reg(
    message: Message,
    session: AsyncSession
):

    user_repo = UsersRepository(
        session=session
    )

    new_user = await user_repo.create(
        entity=UsersBase(
            telegram_id=message.from_user.id,
            telegram_username='@'+message.from_user.username
        )
    )

    if not new_user:
        return await message.answer(f"""
<b>üéâ @{message.from_user.username}</b>

<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>
–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
–ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä—ã –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∏—Ö!""",
parse_mode='HTML'
)
    return await message.answer(f"""
‚ö†Ô∏è @{message.from_user.username}

<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>
""",
    parse_mode='HTML'
)
