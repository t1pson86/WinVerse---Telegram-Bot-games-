import asyncio
from aiogram import Router, F, Bot
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import CallbackQuery, Message

from database import PartiesRepository, UsersRepository
from middleware import GroupOnlyMiddleware

router = Router()
router.message.middleware(GroupOnlyMiddleware())


@router.callback_query(F.data.startswith("accept_party_"))
async def accept_party_handler(
    callback: CallbackQuery, 
    bot: Bot,
    session: AsyncSession
):
    await callback.answer()
    party_info = callback.data.split("_")

    if party_info[4] != str(callback.from_user.id):
        return await callback.message.answer(f"""
‚ùå @{callback.from_user.username}

<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –¥–∞–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é.</b>
""",
    parse_mode='HTML'
    )

    parties_repo = PartiesRepository(
        session=session
    )

    current_party = await parties_repo.read(
        id=int(party_info[2])
    )

    if current_party is None:
        return await callback.message.answer("""
<b>‚ùå –î–∞–Ω–Ω–∞—è –ø–∞—Ä—Ç–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.</b>
–ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!
""",
    parse_mode='HTML'
    )
    
    if current_party.status == 'accept':
        return await callback.message.answer("""
<b>‚ö†Ô∏è –ü–∞—Ä—Ç–∏—è —É–∂–µ –∏–¥–µ—Ç.</b>
–ü—Ä–∏–Ω—è—Ç—å –Ω–µ–ª—å–∑—è!
""",
    parse_mode='HTML'
        )
    
    update_status_party = await parties_repo.update(
        party_id=int(party_info[2]),
        new_status='accept'
    )

    users_repo = UsersRepository(
        session=session
    )

    current_user = await users_repo.get_by_telegram_id(
        telegram_id=int(party_info[3])
    )

    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

    return await callback.message.answer(f"""
‚úÖ <b>–ò–≥—Ä–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>
                                         
üé≤ –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ –Ω–∞—á–∞–ª–∞—Å—å –º–µ–∂–¥—É:
üë§ <b>–ò–≥—Ä–æ–∫ 1</b>: {current_user.telegram_username}
üë§ <b>–ò–≥—Ä–æ–∫ 2</b>: @{callback.from_user.username}

–ö–∏–¥–∞–π—Ç–µ –∫—É–±–∏–∫ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ üé≤)!
–ö—Ç–æ –≤—ã–±—Ä–æ—Å–∏—Ç –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ - –ø–æ–±–µ–¥–∏—Ç!""",

    parse_mode='HTML'
    )



@router.message(F.dice)
async def set_value(
    message: Message,
    session: AsyncSession
):
    parties_repo = PartiesRepository(
        session=session
    )

    current_party_by_creator = await parties_repo.get_party_by_creator_id(
        creator_id=message.from_user.id
    )

    user_repo = UsersRepository(
        session=session
    )

    dice_data = message.dice.value

    if current_party_by_creator is None:
        
        current_party_by_opponent = await parties_repo.get_party_by_opponent_id(
            opponent_id=message.from_user.id
        )

        if current_party_by_opponent is None:
            return
       
        if current_party_by_opponent.opponent_value:
            return
        
        if current_party_by_opponent.status == 'waiting':
            return

        update_opponent_data = await parties_repo.update_party_info_by_opponent_id(
            opponent_id=message.from_user.id,
            new_value=dice_data
        )

        info_opponent = await user_repo.get_by_telegram_id(
            telegram_id=current_party_by_opponent.opponent_id
        )
        creator_name = await user_repo.get_by_telegram_id(
            telegram_id=current_party_by_opponent.creator_id
        )

        if current_party_by_opponent.creator_value:
            del_party = await parties_repo.delete(
                id=current_party_by_opponent.id
            )
            await asyncio.sleep(2.5)
            if dice_data == current_party_by_opponent.creator_value:
                return await message.answer(f"""
ü§ù <b>–ù–∏—á—å—è!</b>
                                    
–û–±–∞ –∏–≥—Ä–æ–∫–∞ –≤—ã–±—Ä–æ—Å–∏–ª–∏ {dice_data} –æ—á–∫–æ–≤.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑!""",
parse_mode='HTML'
    )
            if dice_data > current_party_by_opponent.creator_value:
                return await message.answer(f"""
üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {info_opponent.telegram_username}!</b>

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
{info_opponent.telegram_username}: <b>{current_party_by_opponent.opponent_value} –æ—á–∫–æ–≤</b>
{creator_name.telegram_username}: <b>{current_party_by_opponent.creator_value} –æ—á–∫–æ–≤</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! üéâ""",
parse_mode='HTML')
            
            if dice_data < current_party_by_opponent.creator_value:
                return await message.answer(f"""
üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {creator_name.telegram_username}!</b>

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
{creator_name.telegram_username}: <b>{current_party_by_opponent.creator_value} –æ—á–∫–æ–≤</b>
{info_opponent.telegram_username}: <b>{current_party_by_opponent.opponent_value} –æ—á–∫–æ–≤</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! üéâ""",
parse_mode='HTML')
        
        creator_username_info = await user_repo.get_by_telegram_id(
            telegram_id=current_party_by_opponent.creator_id
        )

        await asyncio.sleep(2.5)

        return await message.answer(
            f"""
<b>‚è≥ –û–∂–∏–¥–∞–µ–º —Ö–æ–¥ –æ—Ç {creator_username_info.telegram_username}.</b>

–í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏ <b>{dice_data} –æ—á–∫–æ–≤</b>.
            """,
            parse_mode='HTML'
        )

    if current_party_by_creator.creator_value:
        return

    if current_party_by_creator.status == 'waiting':
        return
    
    info_creator = await user_repo.get_by_telegram_id(
        telegram_id=current_party_by_creator.creator_id
    )

    opponent_name = await user_repo.get_by_telegram_id(
        telegram_id=current_party_by_creator.opponent_id
    )

    update_creator_data = await parties_repo.update_party_info_by_creator_id(
        creator_id=message.from_user.id,
        new_value=dice_data
    )

    if current_party_by_creator.opponent_value:
        del_party = await parties_repo.delete(
            id=current_party_by_creator.id
        )
        await asyncio.sleep(2.5)
        if dice_data == current_party_by_creator.opponent_value:
            return await message.answer(f"""
ü§ù <b>–ù–∏—á—å—è!</b>
                                    
–û–±–∞ –∏–≥—Ä–æ–∫–∞ –≤—ã–±—Ä–æ—Å–∏–ª–∏ <b>{dice_data} –æ—á–∫–æ–≤</b>.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑!""",
parse_mode='HTML'
    )
        if dice_data > current_party_by_creator.opponent_value:
            return await message.answer(f"""
üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {info_creator.telegram_username}!</b>

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
{info_creator.telegram_username}: <b>{current_party_by_creator.creator_value} –æ—á–∫–æ–≤</b>
{opponent_name.telegram_username}: <b>{current_party_by_creator.opponent_value} –æ—á–∫–æ–≤</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! üéâ""",
parse_mode='HTML')
        if dice_data < current_party_by_creator.opponent_value:
            return await message.answer(f"""
üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {opponent_name.telegram_username}!</b>

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
{opponent_name.telegram_username}: <b>{current_party_by_creator.opponent_value} –æ—á–∫–æ–≤</b>
{info_creator.telegram_username}: <b>{current_party_by_creator.creator_value} –æ—á–∫–æ–≤</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! üéâ""",
parse_mode='HTML')
        
    await asyncio.sleep(2.5)
    
    return await message.answer(
            f"""
<b>‚è≥ –û–∂–∏–¥–∞–µ–º —Ö–æ–¥ –æ—Ç {opponent_name.telegram_username}.</b>

–í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏ <b>{dice_data} –æ—á–∫–æ–≤</b>.
            """,
            parse_mode='HTML'
        )
    



@router.callback_query(F.data.startswith("decline_party_"))
async def decline_party_handler(
    callback: CallbackQuery,
    bot: Bot,
    session: AsyncSession
):
    await callback.answer()

    party_info = callback.data.split("_")
    
    parties_repo = PartiesRepository(
        session=session
    )

    current_party = await parties_repo.read(
        id=int(party_info[2])
    )

    if current_party.creator_id != callback.from_user.id and current_party.opponent_id != callback.from_user.id:
        return await callback.message.answer('‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –µ—ë –∏–≥—Ä–æ–∫–∏!')

    if current_party is None:
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        return
    
    if current_party.status == 'accept':
        return await callback.message.answer("""
‚ö†Ô∏è <b>–î–∞–Ω–Ω–∞—è –ø–∞—Ä—Ç–∏—è —É–∂–µ –∏–¥–µ—Ç.</b>
–ù–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å!
""",
    parse_mode='HTML'
)
    
    user_repo = UsersRepository(
        session=session
    )

    user_data = await user_repo.get_by_telegram_id(
        telegram_id=int(party_info[3])
    )

    if user_data is None:
        return
    
    del_party = await parties_repo.delete(
        id=current_party.id
    )

    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    return await callback.message.answer(f"""
‚ö° <b>–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>
                                         
üôÖ‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username}
–æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏
üé≤ –û—Ç: {user_data.telegram_username}

<i>–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!</i>
""",
    parse_mode='HTML'
)